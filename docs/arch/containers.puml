@startuml
!include <C4/C4_Container>
System_Boundary(PCMS,"PCMS"){
    Container(Web_UI, "Web UI", "",$tags="",$techn="React, MUIv1, Nginx")
    Container(Account_Service, "Account Service", "Manages accounts and performs auth, register, login",$tags="",$techn="DRF")
    Container(Account_DB, "Account DB", "Stores account info",$tags="database",$techn="Postgres")
    Container(Contest_Service, "Contest Service", "CRUD for contests and tasks",$tags="",$techn="DRF")
    Container(Contest_DB, "Contest DB", "Stores contest and task info",$tags="database",$techn="Postgres")
    Container(Solution_Service, "Solution Service", "CRUD for solutions, check quiz solutions, queue code solutions",$tags="",$techn="Python, Litestar, Faststream")
    Container(Solution_DB, "Solution DB", "Stores solutions",$tags="database",$techn="Postgres")
    Container(Solution_Storage, "Solution Storage", "S3 object storage for code solutions",$tags="database",$techn="Minio")
    Container(MQ, "MQ", "Message queue.\nUsed for asynchronous communication between solution service\nand judge services. Also an event queue for object deletion\nevents for synchronising cascade deletion.",$tags="",$techn="RabbitMQ")
    Container(Judge_Service, "Judge Service", "Performs routing of solution check requests",$tags="",$techn="Python, Faststream")
    Container(Judgelet, "Judgelet", "Performs code solution checks",$tags="scalable",$techn="Python, FastAPI")
}

System_Boundary(Monitoring_System,"Monitoring System"){
    Container(Promtail, "Promtail", "Logs collector from docker.",$tags="",$techn="None")
    Container(Loki, "Loki", "Logs manager. Receives log pushes.",$tags="",$techn="None")
    Container(cAdvisor, "cAdvisor", "Metrics collector for docker system.",$tags="",$techn="None")
    Container(Node_Exporter, "Node Exporter", "Metrics collector of host.",$tags="",$techn="None")
    Container(Prometheus, "Prometheus", "Metrics collector. Attached to all services",$tags="",$techn="None")
    Container(Grafana, "Grafana", "Web metrics UI",$tags="",$techn="None")
}

Person(Participant, "Participant", "Contest participant",$tags="")

Person(Administrator, "Administrator", "PCMS Admin",$tags="")

Rel(Participant, Web_UI, "","")

Rel(Administrator, Web_UI, "","")

Rel(Web_UI, Account_Service, "","HTTP REST API")

Rel(Web_UI, Contest_Service, "","HTTP REST API")

Rel(Web_UI, Solution_Service, "","HTTP REST API")

Rel(Web_UI, Solution_Storage, "","HTTP")

Rel(Account_Service, Account_DB, "","")

Rel(Contest_Service, Account_Service, "Auth & get user info","HTTP REST API")

Rel(Contest_Service, Contest_DB, "","")

Rel(Solution_Service, Account_Service, "Auth & get user info","HTTP REST API")

Rel(Solution_Service, Contest_Service, "Get contest & task info","HTTP REST API")

Rel(Solution_Service, Solution_DB, "","")

Rel(Solution_Service, Solution_Storage, "","")

BiRel(MQ, Solution_Service, "Queue code solutions and get judge verdicts","")

BiRel(MQ, Judge_Service, "Get queued solutions and queue verdicts","")

Rel(Judge_Service, Judgelet, "","HTTP REST API")

Rel(Promtail, Loki, "","")

Rel(Promtail, PCMS, "","")

Rel(cAdvisor, PCMS, "","")

Rel(Prometheus, cAdvisor, "","")

Rel(Prometheus, PCMS, "","")

Rel(Prometheus, Node_Exporter, "","")

Rel(Grafana, Loki, "","")

Rel(Grafana, Prometheus, "","")
@enduml
