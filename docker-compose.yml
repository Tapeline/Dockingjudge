version: "3.7"
services:
  rabbitmq:
    image: rabbitmq:3.10.7-management
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASSWORD}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{default,error}] disk_free_limit 2147483648"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    expose:
      - "5672"
      - "15672"
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - main_network


  judgelet_0:
    hostname: jl_0
    image: dockingjudge-unit
    expose: [8000]
    ports:
      - "9000:8000"
    environment:
      IO_ENCODING: ${GLOBAL_ENCODING}
    healthcheck:
      test: curl --fail http://localhost:8000/ping || exit 1
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      - judgelet_network

  judgelet_1:
    hostname: jl_1
    image: dockingjudge-unit
    expose: [8000]
    ports:
      - "9001:8000"
    environment:
      IO_ENCODING: ${GLOBAL_ENCODING}
    healthcheck:
      test: curl --fail http://localhost:8000/ping || exit 1
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      - judgelet_network


  judge_service:
    hostname: judge_service
    build: JudgeService
    environment:
      IO_ENCODING: ${GLOBAL_ENCODING}
      RMQ_ADDRESS: rabbitmq
      RMQ_USER: ${RMQ_USER}
      RMQ_PASSWORD: ${RMQ_PASSWORD}
      CONFIG_PATH: /app/config.yml
    depends_on:
      rabbitmq:
        condition: service_healthy
      judgelet_0:
        condition: service_healthy
      judgelet_1:
        condition: service_healthy
    links:
      - rabbitmq
    networks:
      - main_network
      - judgelet_network


  account_service:
    build: AccountService
    hostname: account.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: account_db
      PG_PORT: 5432
      MODE: production
      RMQ_ADDRESS: rabbitmq
      RMQ_USER: ${RMQ_USER}
      RMQ_PASS: ${RMQ_PASSWORD}
      ENCODING: ${GLOBAL_ENCODING}
      ALLOWED_HOSTS: "*"
      ALLOW_REGISTRATION: True
    ports:
      - "8001:8000"
    expose:
      - 8000
    networks:
      - main_network
    depends_on:
      account_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  account_db:
    image: postgres:13.3
    hostname: account_db
    environment:
      POSTGRES_DB: account_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    ports:
      - "5500:5432"
    expose:
      - "5432"
    networks:
      - main_network
    volumes:
      - account_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d account_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped


  contest_service:
    build: ContestService
    hostname: contest.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: contest_db
      PG_PORT: 5432
      MODE: production
      RMQ_ADDRESS: rabbitmq
      RMQ_USER: ${RMQ_USER}
      RMQ_PASS: ${RMQ_PASSWORD}
      ENCODING: ${GLOBAL_ENCODING}
      ACCOUNT_SERVICE: "http://account.service:8000/api/accounts"
      ALLOWED_HOSTS: "*"
      COMPILERS: "python:python"
      ALLOW_CONTEST_CREATION_TO: "Tapeline"
    ports:
      - "8002:8000"
    expose:
      - 8000
    networks:
      - main_network
    depends_on:
      contest_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      account_service:
        condition: service_started

  contest_db:
    image: postgres:13.3
    hostname: contest_db
    environment:
      POSTGRES_DB: contest_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    expose:
      - "5432"
    ports:
      - "5501:5432"
    networks:
      - main_network
    volumes:
      - contest_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d account_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped


  solution_service:
    build: SolutionService
    hostname: solution.service
    environment:
      SECRET_KEY: ${SECRET_KEY}
      PG_USER: ${DB_USER}
      PG_PASS: ${DB_PASS}
      PG_HOST: solution_db
      PG_PORT: 5432
      MODE: production
      RMQ_ADDRESS: rabbitmq
      RMQ_USER: ${RMQ_USER}
      RMQ_PASS: ${RMQ_PASSWORD}
      ENCODING: ${GLOBAL_ENCODING}
      ACCOUNT_SERVICE: "http://account.service:8000/api/accounts"
      CONTEST_SERVICE: "http://contest.service:8000/api"
      CONTEST_SERVICE_INTERNAL: "http://contest.service:8000/internal"
      ALLOWED_HOSTS: "*"
    ports:
      - "8003:8000"
    expose:
      - 8000
    networks:
      - main_network
    depends_on:
      solution_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      account_service:
        condition: service_started
      contest_service:
        condition: service_started

  solution_db:
    image: postgres:13.3
    hostname: solution_db
    environment:
      POSTGRES_DB: solution_db
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    expose:
      - "5432"
    ports:
      - "5503:5432"
    networks:
      - main_network
    volumes:
      - solution_pgdata:/var/lib/postgresql/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d account_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped


  frontend_service:
    build: Frontend
    hostname: frontend.service
    expose:
      - 3000
    networks:
      - main_network
    depends_on:
      api_gateway:
        condition: service_started


  api_gateway:
    hostname: api.service
    command: nginx -g "daemon off;"
    depends_on:
      - account_service
      - contest_service
      - solution_service
    image: nginx:alpine
    restart: on-failure
    volumes:
      - ./api_gateway_nginx.conf:/etc/nginx/nginx.conf
      - ./sslcert/fullchain.pem:/etc/nginx/server.crt
      - ./sslcert/privkey.pem:/etc/nginx/server.key
    ports:
      - "443:443"
    #  - "8888:80"
    networks:
      - main_network


networks:
  main_network:
    driver: bridge
  judgelet_network:
    driver: bridge


volumes:
  account_pgdata:
  contest_pgdata:
  solution_pgdata:
  rabbitmq_data:
